//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.10

use sea_orm::entity::prelude::*;
use sea_orm::DeriveActiveEnum;
use serde::{Deserialize, Serialize};

// Define the ActiveEnums
#[derive(Clone, Debug, PartialEq, Eq, DeriveActiveEnum, Serialize, Deserialize)]
#[sea_orm(rs_type = "String", db_type = "String(Some(8))")]
pub enum ResultSide {
    #[sea_orm(string_value = "white")]
    White,
    #[sea_orm(string_value = "black")]
    Black,
    #[sea_orm(string_value = "draw")]
    Draw,
}

#[derive(Clone, Debug, PartialEq, Eq, DeriveActiveEnum, Serialize, Deserialize)]
#[sea_orm(rs_type = "String", db_type = "String(Some(20))")] // Adjust db_type length as needed
pub enum GameVariant {
    #[sea_orm(string_value = "standard")]
    Standard,
    #[sea_orm(string_value = "bullet")]
    Bullet,
    #[sea_orm(string_value = "blitz")]
    Blitz,
    #[sea_orm(string_value = "rapid")]
    Rapid,
    #[sea_orm(string_value = "classical")]
    Classical,
    #[sea_orm(string_value = "correspondence")]
    Correspondence,
    #[sea_orm(string_value = "chess960")]
    Chess960,
    // Add other variants as needed
}

#[derive(Clone, Debug, PartialEq, Eq, DeriveEntityModel, Serialize, Deserialize)]
#[sea_orm(table_name = "game")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: Uuid,
    pub white_player: Uuid,
    pub black_player: Uuid,
    #[sea_orm(column_type = "Text")]
    pub fen: String,
    #[sea_orm(column_type = "JsonBinary")]
    pub pgn: Json,
    pub result: ResultSide,
    pub variant: GameVariant,
    pub started_at: DateTimeWithTimeZone,
    pub duration_sec: i32,
    pub created_at: DateTimeWithTimeZone,
    pub updated_at: DateTimeWithTimeZone,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::player::Entity",
        from = "Column::WhitePlayer",
        to = "super::player::Column::Id",
        on_update = "Restrict",
        on_delete = "Restrict"
    )]
    WhitePlayer,
    #[sea_orm(
        belongs_to = "super::player::Entity",
        from = "Column::BlackPlayer",
        to = "super::player::Column::Id",
        on_update = "Restrict",
        on_delete = "Restrict"
    )]
    BlackPlayer,
}

impl Related<super::player::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::WhitePlayer.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
