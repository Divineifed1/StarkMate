//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.10

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};
use uuid::Uuid;

#[derive(Clone, Debug, PartialEq, Eq, Serialize, Deserialize, DeriveEntityModel)]
#[sea_orm(table_name = "game", schema_name = "smdb")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: Uuid,
    pub white_player: Uuid,
    pub black_player: Uuid,
    #[sea_orm(column_type = "Text")]
    pub fen: String,
    #[sea_orm(column_type = "JsonBinary")]
    pub pgn: Json,
    pub result: String,
    pub variant: String,
    pub started_at: DateTimeWithTimeZone,
    pub duration_sec: i32,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::player::Entity",
        from = "Column::BlackPlayer",
        to = "super::player::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Player2,
    #[sea_orm(
        belongs_to = "super::player::Entity",
        from = "Column::WhitePlayer",
        to = "super::player::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Player1,
}

impl ActiveModelBehavior for ActiveModel {}
