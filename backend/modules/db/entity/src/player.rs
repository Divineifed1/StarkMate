//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.0

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Copy, Clone, Default, Debug, DeriveEntity)]
pub struct Entity;

impl EntityName for Entity {
    fn table_name(&self) -> &str {
        "player"
    }
}

#[derive(Clone, Debug, PartialEq, DeriveModel, DeriveActiveModel, Eq, Serialize, Deserialize)]
pub struct Model {
    pub id: Uuid,
    pub username: String,
    pub email: String,
    pub password_hash: Vec<u8>,
    pub biography: Option<String>,
    pub country: Option<String>,
    pub flair: Option<String>,
    pub real_name: String,
    pub location: Option<String>,
    pub fide_rating: Option<i32>,
    pub social_links: Option<Vec<String>>,
    pub is_enabled: bool
}



#[derive(Copy, Clone, Debug, EnumIter, DeriveColumn)]
pub enum Column {
    Id,
    Username,
    Email,
    PasswordHash,
    Biography,
    Country,
    Flair,
    RealName,
    Location,
    FideRating,
    SocialLinks,
    IsEnabled
}

#[derive(Copy, Clone, Debug, EnumIter, DerivePrimaryKey)]
pub enum PrimaryKey {
    Id,
}

impl PrimaryKeyTrait for PrimaryKey {
    type ValueType = Uuid;
    fn auto_increment() -> bool {
        false
    }
}

#[derive(Copy, Clone, Debug, EnumIter)]
pub enum Relation {}

impl ColumnTrait for Column {
    type EntityName = Entity;
    fn def(&self) -> ColumnDef {
        match self {
            Self::Id => ColumnType::Uuid.def(),
            Self::Username => ColumnType::String(StringLen::None).def().unique(),
            Self::Email => ColumnType::String(StringLen::None).def().unique(),
            Self::PasswordHash => ColumnType::VarBinary(StringLen::None).def(),
            Self::Biography => ColumnType::Text.def().null(),
            Self::Country => ColumnType::String(StringLen::None).def().null(),
            Self::Flair => ColumnType::String(StringLen::None).def().null(),
            Self::RealName => ColumnType::String(StringLen::None).def(),
            Self::Location => ColumnType::String(StringLen::None).def().null(),
            Self::IsEnabled => ColumnType::Boolean.def().default(true),
            Self::FideRating => ColumnType::Integer.def().null(),
            Self::SocialLinks => {
                ColumnType::Array(RcOrArc::new(ColumnType::String(StringLen::None)))
                    .def()
                    .null()
            }
        }
    }
}

impl RelationTrait for Relation {
    fn def(&self) -> RelationDef {
        panic!("No RelationDef")
    }
}

impl ActiveModelBehavior for ActiveModel {}
